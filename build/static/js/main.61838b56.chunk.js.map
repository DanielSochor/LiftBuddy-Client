{"version":3,"sources":["utilities/constants.js","utilities/pubsub.js","components/NavBarLogo/NavBarLogo.js","utilities/authorizer.js","utilities/helper.js","components/Nav_Bar/NavBar.js","components/LogIn_SignUp_Modal/LogInSignUpModal.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["APP_NAME","NOTIF","LOG_IN","LOG_OUT","SIGN_UP","AUTH_ERROR","TOGGLE_SIDEBAR_MOBILE","API","Pubsub","obj","observers","publish","notif","data","subs","callback","subscribe","subscriber","cb","push","observer","unsubscribe","i","splice","NavbarLogo","className","onClick","console","log","window","innerWidth","Auth","user","baseURL","process","localStorage","checkForExistingSession","session_token","getItem","getUserInfo","sendLogInRequest","logInObj","validateLogInRequest","axios","post","then","logInResponse","headers","setItem","catch","error","message","sendSignUpRequest","params","validateSignUpRequest","first_name","last_name","username","email_address","password","password_confirm","response","get","validateUserData","deepCopyObj","type","Array","isArray","copy","key","copyObj","length","map","item","sendLogOutRequest","url","method","status","user_id","created","updated","NavBar","Authorizer","changeTypeBtnTextValues","login","signup","customStyles","content","top","left","right","bottom","marginRight","transform","minWidth","LogInSignUpModal","useState","modalType","setModalType","changeTypeBtnText","setChangeTypeBtnText","modalIsOpen","setModalIsOpen","errorMessage","setErrorMessage","firstNameVal","setFirstNameVal","lastNameVal","setLastNameVal","usernameVal","setUsernameVal","emailVal","setEmailVal","passwordVal","setPasswordVal","confirmPasswordVal","setConfirmPasswordVal","useEffect","handleLogIn","handleLogOut","handleErrorInfo","handleFirstNameChange","event","target","value","handleLastNameChange","handleUsernameChange","handleEmailChange","handlePasswordChange","handleConfirmPasswordChange","errorObj","clearFormInputs","isOpen","contentLabel","style","ariaHideApp","placeholder","onChange","newModalType","newChangeBtnText","preventDefault","signinObj","signupObj","Main","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61838b56.chunk.js","sourcesContent":["// Global name of the application\nexport const APP_NAME = 'Lift Buddy';\n\n// set baseURL\n//TODO does it make sense to define this on the front-end?\n//const baseURL = (process.env.NODE_ENV === 'production') ? process.env.REACT_APP_SERVER_URL : process.env.REACT_APP_LOCAL_URL;\n\n// Notification strings for pubsub\nexport const NOTIF = {\n    LOG_IN: 'login',\n    LOG_OUT: 'logout',\n    SIGN_UP: 'signup',\n    AUTH_ERROR: 'auth_error',\n    TOGGLE_SIDEBAR_MOBILE: 'toggle_sidebar_mobile'\n};\n\n// API routes\nexport const API = {\n    getUserInfo: 'api/user/userinfo',\n    login: 'api/user/login',\n    logout: 'api/user/logout',\n    signup: 'api/user/signup'\n};","var Pubsub = {};\n\n(function(obj) {\n  var observers = {};\n\n  obj.publish = (notif, data) => {\n    if (!observers[notif]) {\n      return false;\n    }\n\n    let subs = observers[notif];\n\n    for (var subscriber of subs) {\n      subscriber.callback(data);\n    }\n    //console.log('publishers are: ' + JSON.stringify(subs[0]));\n  };\n\n  obj.subscribe = (notif, subscriber, cb) => {\n    if (!observers[notif]) {\n      observers[notif] = [];\n    }\n\n    observers[notif].push({\n      observer: subscriber,\n      callback: cb\n    });\n    //console.log('subscribers are: ' + JSON.stringify(observers));\n  };\n\n  obj.unsubscribe = (notif, subscriber) => {\n    let subs = observers[notif];\n\n    for (var i in subs) {\n      if (subs[i].observer === subscriber) {\n        subs.splice(i, 1);\n        observers[notif] = subs;\n        return;\n      }\n    }\n  };\n})(Pubsub);\n\nexport default Pubsub;","import React from 'react';\nimport './NavBarLogo.css';\n\nimport { APP_NAME, NOTIF } from '../../utilities/constants';\nimport Pubsub from '../../utilities/pubsub';\n\nfunction NavbarLogo() {\n  const logoClicked = () => {\n    console.log('logo clicked');\n    if (window.innerWidth <= 575) {\n      console.log('Mobile');\n      Pubsub.publish(NOTIF.TOGGLE_SIDEBAR_MOBILE, null);\n    }\n  }\n\n  return (\n    <button className='navbar-logo btn btn-dark' onClick={logoClicked}>{APP_NAME}</button>\n  );\n}\n\nexport default NavbarLogo;","import axios from 'axios';\nimport Pubsub from './pubsub';\nimport { API, NOTIF } from './constants';\n//import { shallowCopyObj, deepCopyObj } from './helper';\nimport { deepCopyObj } from './helper';\n//import Data from './data';\n\nvar Auth = {};\n\nvar user = {};\n\n(function (obj) {\n    // @TODO \n\n    const baseURL = (process.env.NODE_ENV === 'production') ? process.env.REACT_APP_SERVER_URL : process.env.REACT_APP_LOCAL_URL;\n    console.log('baseURL is: ' + baseURL);\n    console.log('local storage');\n    console.log(localStorage);\n\n    obj.checkForExistingSession = () => {\n        let session_token = localStorage.getItem('x-session-token');\n        if (session_token) {\n            console.log('session token exists');\n            console.log('session token is: ' + session_token);\n            obj.getUserInfo(session_token);\n        } else {\n            console.log('no session token exists');\n        }\n    }\n\n    obj.sendLogInRequest = (logInObj) => {\n        console.log('authorizer sendLogInRequest log in object is: ');\n        console.log(logInObj);\n        if (validateLogInRequest(logInObj)) {\n            console.log('API Login is: ' + API.login);\n            axios.post(baseURL + API.login, logInObj)\n                .then(logInResponse => {\n                    console.log('successful hit of API.login');\n                    console.log('logInResponse is');\n                    console.log(logInResponse);\n                    let session_token = logInResponse.headers['x-session-token'];\n                    localStorage.setItem('x-session-token', session_token);\n                    console.log('session token is: ');\n                    console.log(session_token);\n                    obj.getUserInfo(session_token);\n                }).catch(error => {\n                    let errorObj = {\n                        message: 'Error logging in, please try again'\n                    };\n                    Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n                });\n        } else {\n            let errorObj = {\n                message: 'Please fill in the required fields'\n            };\n            Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n        }\n    }\n\n    obj.sendSignUpRequest = (params) => {\n        if (validateSignUpRequest(params)) {\n            console.log('API signup is: ' + API.signup);\n            axios.post(baseURL + API.signup, {\n                first_name: params.first_name,\n                last_name: params.last_name,\n                username: params.username,\n                email_address: params.email_address,\n                password: params.password,\n                password_confirm: params.password_confirm\n            }).then(response => {\n                console.log('response is: ');\n                console.log(response);\n                let logInObj = {\n                    username: params.username,\n                    password: params.password\n                };\n                console.log('authorizer sendSignUpRequest log in object is: ');\n                console.log(logInObj);\n                obj.sendLogInRequest(logInObj);\n            })\n        } else {\n            console.log('Sign up request did not validate');\n        }\n    }\n\n    obj.getUserInfo = (session_token) => {\n        axios.get(baseURL + API.getUserInfo, { headers: { 'x-session-token': session_token } })\n            .then(response => {\n                if (validateUserData(response.data)) {\n                    user = deepCopyObj(response.data);\n                    Pubsub.publish(NOTIF.LOG_IN, null);\n                }\n                console.log('deep copied user is: ');\n                console.log(user);\n            }).catch(error => {\n                console.log(error);\n            });\n    }\n\n    obj.sendLogOutRequest = () => {\n        let session_token = localStorage.getItem('x-session-token');\n        axios({\n            url: baseURL + API.logout,\n            method: 'delete',\n            headers: {\n                'x-session-token': session_token\n            }\n        }).then(response => {\n            if (response.status === 200) {\n                user = {};\n                localStorage.setItem('x-session-token', '');\n                Pubsub.publish(NOTIF.LOG_OUT, null);\n                //Data.handleSignout();\n                console.log('signout success');\n            } else {\n                // @TODO not sure what to do in a .then handler here\n                console.log('signout resolved, but not status 200');\n            }\n        }).catch(error => {\n            console.log(error);\n        });  \n    }\n\n})(Auth);\n\nconst validateSignUpRequest = (params) => {\n    if (params.first_name &&\n        params.last_name &&\n        params.username &&\n        params.email_address &&\n        params.password &&\n        params.password_confirm) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst validateLogInRequest = (logInObj) => {\n    if (logInObj.username &&\n        logInObj.password) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst validateUserData = (data) => {\n    if (\n        data.user_id &&\n        data.first_name &&\n        data.last_name &&\n        data.username &&\n        data.email_address &&\n        data.created &&\n        data.updated\n    ) {\n        console.log(\"user data validates as true\");\n        return true\n    }\n    console.log(\"user data validates as false\");\n    return false;\n}\n\nexport default Auth;\n\nexport {\n    user\n};\n\n// console.log('process.env is: ');\n// console.log(process.env);\n\n// //Can we somehow include this in the future:\n// //var baseURL = (process.env.NODE_ENV === 'production') ? process.env.REACT_APP_SERVER_URL : process.env.REACT_APP_LOCAL_URL;\n\n// function Auth() {\n//     var baseURL = '';\n//     if (process.env.NODE_ENV === 'production') {\n//         baseURL = process.env.REACT_APP_SERVER_URL\n//         let test = {\n//             email_address: 'production@gmail.com'\n//         };\n//         axios.post(baseURL + 'api/user', test)\n//             .then(response => {\n//                 console.log('response is: ');\n//                 console.log(response);\n//             }).catch(error => {\n//                 console.log(error);\n//             });\n//     } else if (process.env.NODE_ENV === 'development') {\n//         baseURL = process.env.REACT_APP_LOCAL_URL\n//         let test = {\n//             email_address: 'development@gmail.com'\n//         };\n//         axios.post(baseURL + 'api/user', test)\n//             .then(response => {\n//                 console.log('response is: ');\n//                 console.log(response);\n//             }).catch(error => {\n//                 console.log(error);\n//             });\n//     } else {\n//         console.log('development environment is not production or development');\n//     };\n// }\n\n// export default Auth;","const deepCopyObj = (obj) => {\n    const copyObj = () => {\n      let copy = {};\n  \n      for (var key in obj) {\n        copy[key] = deepCopyObj(obj[key]);\n      }\n  \n      return copy;\n    };\n  \n    const copyArr = () => {\n      if (obj.length) {\n        return obj.map(item => {\n          return deepCopyObj(item);\n        });\n      } else {\n        return [];\n      }\n    };\n  \n    let type = typeof obj;\n  \n    // typeof [Array] returns \"object\" so this is needed to check for arrays\n    if (type === 'object' && Array.isArray(obj)) {\n      type = 'array';\n    }\n  \n    if (obj === null) {\n      console.log('null type');\n      return null;\n    } else if (type === 'object') {\n      return copyObj();\n    } else if (type === 'array') {\n      return copyArr();\n    } else {\n      return obj;\n    }\n  }\n\n  export {\n    //shallowCopyObj,\n    deepCopyObj,\n};","import React from 'react';\n//import './NavBar.css';\n\n// Component imports\nimport NavbarLogo from '../NavBarLogo/NavBarLogo';\nimport Authorizer from '../../utilities/authorizer';\n//import NavbarAuthDropdown from '../navbarAuthDropdown/navbarAuthDropdown';\n//import AuthModal from '../authModal/authModal';\n\nfunction NavBar() {\n\n  return (\n    <nav className='navbar navbar-expand navbar-dark bg-dark'>\n      <NavbarLogo />\n      <div className='navbar-nav ml-auto'>\n        <button type='button' className='btn btn-danger' onClick={() => Authorizer.sendLogOutRequest()}>Sign Out</button>\n      </div>\n   </nav>\n  );\n}\n\nexport default NavBar;","import React, { useState, useEffect } from 'react';\nimport \"./LogInSignUpModal.css\"\nimport Modal from 'react-modal';\nimport Auth from '../../utilities/authorizer';\nimport Pubsub from '../../utilities/pubsub';\n\nimport { NOTIF, AUTH_MODAL_TYPES } from '../../utilities/constants';\n\nconst changeTypeBtnTextValues = {\n    login: 'Don\\'t have an account?',\n    signup: 'Already have an account?'\n};\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        // Set min modal width\n        minWidth: '350px'\n    }\n};\n\n//this is not currently used, the modal currently checks for the actual string values\nconst ModalType = {\n    login: 'Log In',\n    signup: 'Sign Up'\n};\n\nfunction LogInSignUpModal() {\n\n    const [modalType, setModalType] = useState('login');\n    const [changeTypeBtnText, setChangeTypeBtnText] = useState(changeTypeBtnTextValues.login);\n    const [modalIsOpen, setModalIsOpen] = useState(true);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [firstNameVal, setFirstNameVal] = useState('');\n    const [lastNameVal, setLastNameVal] = useState('');\n    const [usernameVal, setUsernameVal] = useState('');\n    const [emailVal, setEmailVal] = useState('');\n    const [passwordVal, setPasswordVal] = useState('');\n    const [confirmPasswordVal, setConfirmPasswordVal] = useState('');\n\n    useEffect(() => {\n        //Pubsub.subscribe('modal_toogle', this, handleModalToggle);\n        Pubsub.subscribe(NOTIF.LOG_IN, this, handleLogIn);\n        Pubsub.subscribe(NOTIF.LOG_OUT, this, handleLogOut);\n        Pubsub.subscribe('auth_error', this, handleErrorInfo);\n        Auth.checkForExistingSession();\n        return (() => {\n            //Pubsub.unsubscribe('modal_toogle', this);\n            Pubsub.unsubscribe('login', this);\n            Pubsub.unsubscribe('logout', this);\n            Pubsub.unsubscribe('auth_error', this);\n        });\n    }, []);\n\n    useEffect(() => {\n        Auth.checkForExistingSession();\n    }, []);\n\n    // const handleModalToggle = (type) => {\n    //     if (type === loginType.login) {\n    //       setModalType(loginType.login);\n    //       setChangeTypeBtnText(changeTypeBtnTextValues.login);\n    //     } else if (type === loginType.signup) {\n    //       setModalType(loginType.signup);\n    //       setChangeTypeBtnText(changeTypeBtnTextValues.signup);\n    //     }\n    //     setErrorMessage('');\n    //     setModalIsOpen(false);\n    //   }\n\n\n    const toggleModalType = () => {\n        //setErrorMessage('');\n        let newModalType = modalType === 'login' ? 'signup' : 'login';\n        let newChangeBtnText = modalType === 'login' ? changeTypeBtnTextValues.signup : changeTypeBtnTextValues.login;\n        setModalType(newModalType);\n        setChangeTypeBtnText(newChangeBtnText);\n    }\n\n    const handleLogIn = () => {\n        setModalIsOpen(false);\n        //Pubsub.publish('login', true);\n    }\n\n    const handleLogOut = () => {\n        setModalIsOpen(true);\n        //TODO add sign up and log in buttons to NAV eventually, now bring back up the modal\n        //Pubsub.publish('login', false);\n    }\n\n    // const openModal = () => {\n    //     setModalIsOpen(true);\n    // }\n    // const closeModal = () => {\n    //     setModalIsOpen(false);\n    // }\n\n    const handleFirstNameChange = (event) => {\n        setFirstNameVal(event.target.value);\n    }\n    const handleLastNameChange = (event) => {\n        setLastNameVal(event.target.value);\n    }\n    const handleUsernameChange = (event) => {\n        setUsernameVal(event.target.value);\n    }\n    const handleEmailChange = (event) => {\n        // @TODO implement live validation\n        setEmailVal(event.target.value);\n    }\n    const handlePasswordChange = (event) => {\n        // @TODO implement live validation\n        setPasswordVal(event.target.value);\n    }\n    const handleConfirmPasswordChange = (event) => {\n        setConfirmPasswordVal(event.target.value);\n    }\n    const handleErrorInfo = (errorObj) => {\n        setErrorMessage(errorObj.message);\n    }\n\n    const authSubmit = (event) => {\n        event.preventDefault();\n        setErrorMessage('');\n        if (modalType === 'login') {\n            let signinObj = {\n                username: usernameVal,\n                password: passwordVal\n            };\n            console.log('sign in obj: ');\n            console.log(signinObj);\n            Auth.sendLogInRequest(signinObj);\n        } else if (modalType === 'signup') {\n            let signupObj = {\n                first_name: firstNameVal,\n                last_name: lastNameVal,\n                email_address: emailVal,\n                username: usernameVal,\n                password: passwordVal,\n                password_confirm: confirmPasswordVal\n            };\n            console.log('sign up obj: ');\n            console.log(signupObj);\n            Auth.sendSignUpRequest(signupObj);\n            clearFormInputs();\n        }\n    }\n\n    const clearFormInputs = () => {\n        //event.preventDefault();\n        console.log('test');\n    }\n\n    const generateFormContents = () => {\n        if (modalType === 'login') {\n            return (\n                <div className='modal-body'>\n                    <div className='form-group'>\n                        <label>Username</label>\n                        <input className='form-control' placeholder='username' value={usernameVal} onChange={handleUsernameChange} />\n                    </div>\n                    <div className='form-group'>\n                        <label>Password</label>\n                        <input className='form-control' placeholder='password' value={passwordVal} onChange={handlePasswordChange} />\n                    </div>\n                </div>\n            );\n        } else if (modalType === 'signup') {\n            return (\n                //className='form-control' puts input fields below form label\n                <div className='modal-body'>\n                    <div className='form-group'>\n                        <label>First Name</label>\n                        <input className='form-control' placeholder='first name' value={firstNameVal} onChange={handleFirstNameChange} />\n                    </div>\n                    <div className='form-group'>\n                        <label>Last Name</label>\n                        <input className='form-control' placeholder='last name' value={lastNameVal} onChange={handleLastNameChange} />\n                    </div>\n                    <div className='form-group'>\n                        <label>Username</label>\n                        <input className='form-control' placeholder='username' value={usernameVal} onChange={handleUsernameChange} />\n                    </div>\n                    <div className='form-group'>\n                        <label>Email</label>\n                        <input className='form-control' placeholder='name@example.com' value={emailVal} onChange={handleEmailChange} />\n                        {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\n                    </div>\n                    <div className='form-group'>\n                        <label>Password</label>\n                        <input className='form-control' placeholder='password' value={passwordVal} onChange={handlePasswordChange} />\n                    </div>\n                    <div className='form-group'>\n                        <label>Confirm Password</label>\n                        <input className='form-control' placeholder='password' value={confirmPasswordVal} onChange={handleConfirmPasswordChange} />\n                    </div>\n                </div>\n            )\n        } else {\n            console.log('error in authModal type: ' + modalType);\n        }   \n    }\n\n    const generateErrorInfo = () => {\n        return (\n            <span className='text-danger'>{errorMessage}</span>\n        );\n    }\n\nreturn (\n    <Modal\n        isOpen={modalIsOpen}\n        contentLabel='LogIn Modal'\n        style={customStyles}\n        ariaHideApp={false}\n    >\n        <div className='modal-header'>\n            <h5 className='modal-title'>{modalType}</h5>\n        </div>\n        <div className='error-info'>\n            {generateErrorInfo()}\n        </div>\n        <form>\n            {generateFormContents()}\n            <button type='button' className='btn btn-link' onClick={toggleModalType}>{changeTypeBtnText}</button>\n            <div className='modal-footer'>\n                <button type='submit' className='btn btn-primary' onClick={authSubmit}>Submit</button>\n            </div>\n        </form>\n    </Modal>\n    )\n}\n\nexport default LogInSignUpModal;","import React from 'react';\nimport './Main.css';\nimport LogInSignUpModal from '../LogIn_SignUp_Modal/LogInSignUpModal';\n\n//import React, { useState, useEffect } from 'react';\n//-import Run from \"../../pages/Run/Run\";\n//import Pubsub from '../../utilities/pubsub';\n//import Challenge from '../Challenge/Challenge';\n//import Auth from '../../utilities/authorizer';\n//import HomePage from \"../../pages/HomePage/HomePage\";\n//-import Bike from '../../pages/Bike/Bike';\n//-import Abstain from '../../pages/Abstaining/Abstaining';\n//-import Water from '../../pages/Water/Water';\n//-import ChallengePage from '../ChallengePage/ChallengePage';\n//import ChallengeContainer from '../ChallengeContainer/ChallengeContainer';\n//-import FAB from '../FloatingButton/Fab';\n//import { BrowserRouter as Router, Route } from \"react-router-dom\";\n//import { NOTIF } from '../../utilities/constants';\n\nfunction Main() {\n\n  //const [authenticated, setAuthenticated] = useState(false);\n  //const [challengeType, setChallengeType] = useState('');\n\n  // useEffect(() => {\n  //   Pubsub.subscribe('login', this, handleSignin);\n  //   Pubsub.subscribe('logout', this, handleSignout);\n  //   Pubsub.subscribe('challengeType', this, handleChallengeType);\n  //   return (() => {\n  //     Pubsub.unsubscribe('login', this);\n  //     Pubsub.unsubscribe('logout', this);\n  //     Pubsub.unsubscribe('challengeType', this);\n  //   });\n  // }, []);\n\n  // const handleSignout = () => {\n  //   setAuthenticated(false);\n  // }\n\n  // const handleSignin = () => {\n  //   setAuthenticated(true);\n  // }\n\n  //-const handleChallengeType = (challengeType) => {\n  //-  setChallengeType(challengeType);\n  //-  console.log('challenge type is: ' + challengeType);\n  //-}\n\n  // const pageDirector = () => {\n  //   if (authenticated) {\n  //     switch (challengeType) {\n  //       case ('run'):\n  //         return <Run />;\n  //       case ('bike'):\n  //         return <Bike />;\n  //       case ('water'):\n  //         return <Water />;\n  //       case ('abstain'):\n  //         return <Abstain />;\n  //       default:\n  //         return <ChallengePage />\n  //     }\n  //   }\n  // }\n\n//<div className='bg' style={{ backgroundImage:`url(${image})` }}>\n\n  return (\n    <div className='container'>\n      {/* <Router>\n        <div>\n          <Route exact path=\"/challengepage\" component={ChallengePage} />\n          <Route exact path=\"/homepage\" component={HomePage}/>\n        </div>\n      </Router> */}\n      <LogInSignUpModal />\n      {/* <FAB /> */}\n      {/* {pageDirector()} */}\n    </div>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\n\nimport NavBar from './components/Nav_Bar/NavBar';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}