{"version":3,"sources":["utilities/pubsub.js","utilities/helper.js","utilities/authorizer.js","components/LoginSignUpModal/LoginSignUpModal.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Pubsub","obj","observers","publish","notif","data","subs","callback","subscribe","subscriber","cb","push","observer","unsubscribe","i","splice","deepCopyObj","type","Array","isArray","console","log","copy","key","copyObj","length","map","item","Auth","user","baseURL","process","localStorage","checkForExistingSession","session_token","getItem","axios","get","headers","then","response","validateUserData","catch","error","sendSigninRequest","params","validateSigninRequest","signinObj","username","password","post","setItem","message","sendSignupRequest","validateSignupRequest","first_name","last_name","email_address","password_confirm","signinResp","getResponse","sendSignoutRequest","url","method","status","user_id","created","updated","changeTypeBtnTextValues","login","signup","loginType","LoginSignUpModal","useState","modalType","setModalType","changeTypeBtnText","setChangeTypeBtnText","modalIsOpen","setModalIsOpen","errorMessage","setErrorMessage","firstNameVal","setFirstNameVal","lastNameVal","setLastNameVal","usernameVal","setUsernameVal","emailVal","setEmailVal","passwordVal","setPasswordVal","confirmPasswordVal","setConfirmPasswordVal","useEffect","handleLogin","handleSignout","handleErrorInfo","handleFirstNameChange","event","target","value","handleLastNameChange","handleUsernameChange","handleEmailChange","handlePasswordChange","handleConfirmPasswordChange","errorObj","isOpen","contentLabel","ariaHideApp","className","id","onChange","htmlFor","onClick","newModalType","newChangeBtnText","name","href","preventDefault","signupObj","Main","setAuthenticated","handleSignin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc97ff9c.chunk.js","sourcesContent":["var Pubsub = {};\n\n(function(obj) {\n  var observers = {};\n\n  obj.publish = (notif, data) => {\n    if (!observers[notif]) {\n      return false;\n    }\n\n    let subs = observers[notif];\n\n    for (var subscriber of subs) {\n      subscriber.callback(data);\n    }\n    //console.log('publishers are: ' + JSON.stringify(subs[0]));\n  };\n\n  obj.subscribe = (notif, subscriber, cb) => {\n    if (!observers[notif]) {\n      observers[notif] = [];\n    }\n\n    observers[notif].push({\n      observer: subscriber,\n      callback: cb\n    });\n    //console.log('subscribers are: ' + JSON.stringify(observers));\n  };\n\n  obj.unsubscribe = (notif, subscriber) => {\n    let subs = observers[notif];\n\n    for (var i in subs) {\n      if (subs[i].observer === subscriber) {\n        subs.splice(i, 1);\n        observers[notif] = subs;\n        return;\n      }\n    }\n  };\n})(Pubsub);\n\nexport default Pubsub;","const deepCopyObj = (obj) => {\n    const copyObj = () => {\n      let copy = {};\n  \n      for (var key in obj) {\n        copy[key] = deepCopyObj(obj[key]);\n      }\n  \n      return copy;\n    };\n  \n    const copyArr = () => {\n      if (obj.length) {\n        return obj.map(item => {\n          return deepCopyObj(item);\n        });\n      } else {\n        return [];\n      }\n    };\n  \n    let type = typeof obj;\n  \n    // typeof [Array] returns \"object\" so this is needed to check for arrays\n    if (type === 'object' && Array.isArray(obj)) {\n      type = 'array';\n    }\n  \n    if (obj === null) {\n      console.log('null type');\n      return null;\n    } else if (type === 'object') {\n      return copyObj();\n    } else if (type === 'array') {\n      return copyArr();\n    } else {\n      return obj;\n    }\n  }\n\n  export {\n    //shallowCopyObj,\n    deepCopyObj,\n};","import axios from 'axios';\n\nimport Pubsub from './pubsub';\n//import { shallowCopyObj, deepCopyObj } from './helper';\nimport { deepCopyObj } from './helper';\n//import Data from './data';\n\nvar Auth = {};\n\nvar user = {};\n\n(function (obj) {\n    // @TODO \n\n    const baseURL = (process.env.NODE_ENV === 'production') ? process.env.REACT_APP_SERVER_URL : process.env.REACT_APP_LOCAL_URL;\n    console.log('baseURL is: ' + baseURL);\n    console.log('local storage');\n    console.log(localStorage);\n\n    obj.checkForExistingSession = () => {\n        let session_token = localStorage.getItem('x-session-token');\n        if (session_token) {\n            console.log('session token exists');\n            console.log('session token is: ' + session_token);\n            //axios.get(API.getUsers, { headers: { 'x-session-token': session_token } }).then(response => {\n            axios.get(baseURL + 'api/users', { headers: { 'x-session-token': session_token } }).then(response => {\n                if (validateUserData(response.data)) {\n                    user = deepCopyObj(response.data);\n                    console.log('deep copy of user is: ');\n                    console.log(user);\n                    console.log('user is validated');\n                }\n                if (user === {}) {\n                    console.log('no existing session');\n                } else {\n                    console.log('existing session');\n                }\n                //Pubsub.publish(NOTIF.SIGN_IN, null);\n                Pubsub.publish('login', null);\n            }).catch(error => {\n                console.log('session check failed');\n                console.log(error);\n            });\n        } else {\n            console.log('no session token exists');\n        }\n    }\n\n    obj.sendSigninRequest = (params) => {\n        // API require email OR alias\n        // forcing username at the moment - may implement more elegant logic later\n        if (validateSigninRequest(params)) {\n            let signinObj = {\n                username: params.username,\n                password: params.password\n            };\n            // this extra call is not ideal, but we need to hack our way to getting the correct info on signin.  In the future, the API will need to be refactored to send back all the necessary info\n            console.log('pre sign in');\n            console.log(signinObj);\n            //axios.post(API.signin, signinObj).then(response => {\n            console.log(baseURL + 'api/users/login');\n            axios.post(baseURL + 'api/users/login', signinObj).then(response => {\n                let session_token = response.headers['x-session-token'];\n                localStorage.setItem('x-session-token', session_token);\n                //axios.get(API.getUsers, { headers: { 'x-session-token': session_token } }).then(response => {\n                axios.get(baseURL + 'api/users', { headers: { 'x-session-token': session_token } }).then(response => {\n                    user = deepCopyObj(response.data);\n                    console.log('attempt at /api/user')\n                    console.log(user);\n                    //Pubsub.publish(NOTIF.SIGN_IN, null);\n                    Pubsub.publish('login', null);\n                }).catch(error => {\n                    console.log(error);\n                    let errorObj = {\n                        message: 'Error signing in, please try again'\n                    };\n                    //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n                    Pubsub.publish('auth_error', errorObj);\n                });\n            }).catch(error => {\n                // @TODO return error codes and display helpful messages to the user, i.e. incorrect password, etc.\n                // Potentially make more DRY\n                let errorObj = {\n                    message: 'Error signing in, please try again'\n                };\n                //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n                Pubsub.publish('auth_error', errorObj);\n            });\n        } else {\n            let errorObj = {\n                message: 'Please fill in the required fields'\n            };\n            //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n            Pubsub.publish('auth_error', errorObj);\n        }\n    }\n\n    obj.sendSignupRequest = (params) => {\n        if (validateSignupRequest(params)) {\n            console.log('sent signup request');\n            //axios.post(API.signup, {\n            axios.post(baseURL + 'api/users', {\n                first_name: params.first_name,\n                last_name: params.last_name,\n                username: params.username,\n                email_address: params.email_address,\n                password: params.password,\n                password_confirm: params.password_confirm\n            }).then(response => {\n                let signinObj = {\n                    username: params.username,\n                    email_address: params.email_address,\n                    password: params.password\n                };\n                console.log('signin object is: ')\n                console.log(signinObj);\n                // these TWO extra calls are not ideal, but we need to hack our way to getting the correct info on signup.  In the future, the API will need to be refactored to send back all the necessary info\n                //axios.post(API.signin, signinObj).then(signinResp => {\n                axios.post(baseURL + 'api/users/login', signinObj).then(signinResp => {\n                    console.log('sign in response');\n                    console.log(signinResp.headers);\n                    let session_token = signinResp.headers['x-session-token'];\n                    console.log('session token is');\n                    console.log(session_token);\n                    localStorage.setItem('x-session-token', session_token);\n                    //axios.get(API.getUsers, { headers: { 'x-session-token': session_token } }).then(getResponse => {\n                    axios.get(baseURL + 'api/users', { headers: { 'x-session-token': session_token } }).then(getResponse => {\n                        user = deepCopyObj(getResponse.data);\n                        console.log('post to login:')\n                        console.log(user);\n                        //Pubsub.publish(NOTIF.SIGN_IN, null);\n                        Pubsub.publish('login', null);\n                    }).catch(error => {\n                        console.log(error);\n                        let errorObj = {\n                            message: 'Error signing up, please try again'\n                        };\n                        //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n                        Pubsub.publish('auth_error', errorObj);\n                    });\n                }).catch(error => {\n                    console.log(error);\n                    let errorObj = {\n                        message: 'Error signing up, please try again'\n                    };\n                    //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n                    Pubsub.publish('auth_error', errorObj);\n                });\n            }).catch(error => {\n                // @TODO return error codes and display helpful messages to the user, i.e. incorrect password, etc.\n                // Potentially make more DRY\n                let errorObj = {\n                    message: 'Error signing up, please try again'\n                };\n                //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n                Pubsub.publish('auth_error', errorObj);\n            });\n        } else {\n            let errorObj = {\n                message: 'Please fill out all fields'\n            };\n            //Pubsub.publish(NOTIF.AUTH_ERROR, errorObj);\n            Pubsub.publish('auth_error', errorObj);\n        }\n    }\n\n    obj.sendSignoutRequest = () => {\n        // @TODO need to verify what direction we're taking with the session token business\n        let session_token = localStorage.getItem('x-session-token');\n        axios({\n            //url: API.signout,\n            url: baseURL + 'api/users/login',\n            method: 'delete',\n            headers: {\n                'x-session-token': session_token\n            }\n        }).then(response => {\n            if (response.status === 200) {\n                user = {};\n                localStorage.setItem('x-session-token', '');\n                //Pubsub.publish(NOTIF.SIGN_OUT, null);\n                Pubsub.publish('logout', null);\n                //Data.handleSignout();\n                console.log('signout success');\n            } else {\n                // @TODO not sure what to do in a .then handler here\n                console.log('signout resolved, but not status 200');\n            }\n        }).catch(error => {\n            console.log(error);\n            // @TODO send an error back to the user\n        });\n    }\n\n})(Auth);\n\nconst validateSigninRequest = (params) => {\n    // API requires either email or alias, and password\n    //if ((params.alias || params.email_address) && params.password) {\n    //return true;\n    //}\n    //return false;\n    if ((params.username || params.email_address) && params.password) {\n        console.log('user is validated');\n        //if (params.username && params.password) {\n        return true;\n    }\n    console.log('user is not validated');\n    return false;\n}\n\nconst validateSignupRequest = (params) => {\n    if (\n        params.first_name &&\n        params.last_name &&\n        params.username &&\n        params.email_address &&\n        //params.alias &&\n        params.password &&\n        params.password_confirm) {\n        console.log('signup has the correct parameters');\n        return true;\n    }\n    console.log('signup does not have the correct parameters');\n    return false;\n}\n\nconst validateUserData = (data) => {\n    if (\n        data.user_id &&\n        data.first_name &&\n        data.last_name &&\n        data.username &&\n        data.email_address &&\n        data.created &&\n        data.updated\n    ) {\n        console.log(\"user data validates as true\");\n        return true\n    }\n    console.log(\"user data validates as false\");\n    return false;\n}\n\nexport default Auth;\n\nexport {\n    user\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// console.log('process.env is: ');\n// console.log(process.env);\n\n// //Can we somehow include this in the future:\n// //var baseURL = (process.env.NODE_ENV === 'production') ? process.env.REACT_APP_SERVER_URL : process.env.REACT_APP_LOCAL_URL;\n\n// function Auth() {\n//     var baseURL = '';\n//     if (process.env.NODE_ENV === 'production') {\n//         baseURL = process.env.REACT_APP_SERVER_URL\n//         let test = {\n//             email_address: 'production@gmail.com'\n//         };\n//         axios.post(baseURL + 'api/user', test)\n//             .then(response => {\n//                 console.log('response is: ');\n//                 console.log(response);\n//             }).catch(error => {\n//                 console.log(error);\n//             });\n//     } else if (process.env.NODE_ENV === 'development') {\n//         baseURL = process.env.REACT_APP_LOCAL_URL\n//         let test = {\n//             email_address: 'development@gmail.com'\n//         };\n//         axios.post(baseURL + 'api/user', test)\n//             .then(response => {\n//                 console.log('response is: ');\n//                 console.log(response);\n//             }).catch(error => {\n//                 console.log(error);\n//             });\n//     } else {\n//         console.log('development environment is not production or development');\n//     };\n// }\n\n// export default Auth;","import React, { useState, useEffect } from '../../../node_modules/react';\nimport \"./LoginSignUpModal.css\"\nimport Modal from '../../../node_modules/react-modal';\nimport Auth from '../../utilities/authorizer';\nimport Pubsub from '../../utilities/pubsub';\n\nconst changeTypeBtnTextValues = {\n    login: 'Don\\'t have an account?',\n    signup: 'Already have an account?'\n};\n\nconst loginType = {\n    login: 'Log In',\n    signup: 'Sign Up'\n};\n\nfunction LoginSignUpModal() {\n\n    const [modalType, setModalType] = useState(loginType.login);\n    const [changeTypeBtnText, setChangeTypeBtnText] = useState(changeTypeBtnTextValues.login);\n    const [modalIsOpen, setModalIsOpen] = useState(true);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const [firstNameVal, setFirstNameVal] = useState('');\n    const [lastNameVal, setLastNameVal] = useState('');\n    const [usernameVal, setUsernameVal] = useState('');\n    const [emailVal, setEmailVal] = useState('');\n    const [passwordVal, setPasswordVal] = useState('');\n    const [confirmPasswordVal, setConfirmPasswordVal] = useState('');\n\n    useEffect(() => {\n        //Pubsub.subscribe('modal_toogle', this, handleModalToggle);\n        Pubsub.subscribe('login', this, handleLogin);\n        Pubsub.subscribe('logout', this, handleSignout);\n        Pubsub.subscribe('auth_error', this, handleErrorInfo);\n        Auth.checkForExistingSession();\n        return (() => {\n            //Pubsub.unsubscribe('modal_toogle', this);\n            Pubsub.unsubscribe('login', this);\n            Pubsub.unsubscribe('logout', this);\n            Pubsub.unsubscribe('auth_error', this);\n        });\n    }, []);\n\n    // const handleModalToggle = (type) => {\n    //     if (type === loginType.login) {\n    //       setModalType(loginType.login);\n    //       setChangeTypeBtnText(changeTypeBtnTextValues.login);\n    //     } else if (type === loginType.signup) {\n    //       setModalType(loginType.signup);\n    //       setChangeTypeBtnText(changeTypeBtnTextValues.signup);\n    //     }\n    //     setErrorMessage('');\n    //     setModalIsOpen(false);\n    //   }\n\n\n    const toggleModalType = () => {\n        //setErrorMessage('');\n        let newModalType = modalType === loginType.login ? loginType.signup : loginType.login;\n        let newChangeBtnText = modalType === loginType.login ? changeTypeBtnTextValues.signup : changeTypeBtnTextValues.login;\n        setModalType(newModalType);\n        setChangeTypeBtnText(newChangeBtnText);\n    }\n\n    const handleLogin = () => {\n        setModalIsOpen(false);\n        //Pubsub.publish('login', true);\n    }\n\n    const handleSignout = () => {\n        setModalIsOpen(true);\n        //Pubsub.publish('login', false);\n    }\n\n    // const openModal = () => {\n    //     setModalIsOpen(true);\n    // }\n    // const closeModal = () => {\n    //     setModalIsOpen(false);\n    // }\n\n    const handleFirstNameChange = (event) => {\n        setFirstNameVal(event.target.value);\n    }\n    const handleLastNameChange = (event) => {\n        setLastNameVal(event.target.value);\n    }\n    const handleUsernameChange = (event) => {\n        setUsernameVal(event.target.value);\n    }\n    const handleEmailChange = (event) => {\n        // @TODO implement live validation\n        setEmailVal(event.target.value);\n    }\n    const handlePasswordChange = (event) => {\n        // @TODO implement live validation\n        setPasswordVal(event.target.value);\n    }\n    const handleConfirmPasswordChange = (event) => {\n        setConfirmPasswordVal(event.target.value);\n    }\n    const handleErrorInfo = (errorObj) => {\n        setErrorMessage(errorObj.message);\n    }\n\n    const authSubmit = (event) => {\n        event.preventDefault();\n        setErrorMessage('');\n        if (modalType === loginType.login) {\n            let signinObj = {\n                username: usernameVal,\n                password: passwordVal\n            };\n            console.log('sign in obj: ');\n            console.log(signinObj);\n            Auth.sendSigninRequest(signinObj);\n        } else if (modalType === loginType.signup) {\n            let signupObj = {\n                first_name: firstNameVal,\n                last_name: lastNameVal,\n                email_address: emailVal,\n                username: usernameVal,\n                password: passwordVal,\n                password_confirm: confirmPasswordVal\n            };\n            console.log('sign up obj: ');\n            console.log(signupObj);\n            Auth.sendSignupRequest(signupObj);\n        }\n    }\n\n    const generateFormContents = () => {\n        if (modalType === loginType.login) {\n            return (\n                <div className='modal-content'>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"loginUsername\" type=\"text\" className=\"validate\" value={usernameVal} onChange={handleUsernameChange} />\n                            <label htmlFor=\"loginUsername\">Username</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"loginPassword\" type=\"password\" className=\"validate\" value={passwordVal} onChange={handlePasswordChange} />\n                            <label htmlFor=\"loginPassword\">Password</label>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else if (modalType === loginType.signup) {\n            return (\n                <div className='modal-content'>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"signUpFirstName\" type=\"text\" className=\"validate\" value={firstNameVal} onChange={handleFirstNameChange} />\n                            <label htmlFor=\"signUpFirstName\">First Name</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"signUpLastName\" type=\"text\" className=\"validate\" value={lastNameVal} onChange={handleLastNameChange} />\n                            <label htmlFor=\"signUpLastName\">Last Name</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"signUpUsername\" type=\"text\" className=\"validate\" value={usernameVal} onChange={handleUsernameChange} />\n                            <label htmlFor=\"signUpUsername\">Username</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"signUpEmail\" type=\"email\" className=\"validate\" value={emailVal} onChange={handleEmailChange} />\n                            <label htmlFor=\"signUpEmail\">Email</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"signUpPassword\" type=\"password\" className=\"validate\" value={passwordVal} onChange={handlePasswordChange} />\n                            <label htmlFor=\"signUpPassword\">Password</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-field col s12\">\n                            <input id=\"confirmPassword\" type=\"password\" className=\"validate\" value={confirmPasswordVal} onChange={handleConfirmPasswordChange} />\n                            <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            console.log('error in authModal type: ' + modalType);\n        }\n    }\n\n    const generateErrorInfo = () => {\n        return (\n            <span className='text-danger'>{errorMessage}</span>\n        );\n    }\n\n    return (\n        <Modal\n            isOpen={modalIsOpen}\n            contentLabel='Login Modal'\n            ariaHideApp={false}\n        >\n            <h5 className='modal-title'>{modalType}</h5>\n            <div className='error-info'>\n                {generateErrorInfo()}\n            </div>\n            <form>\n                {generateFormContents()}\n                <div className=\"row center\">\n                    <button type='button' className='btn btn-link waves-light light-blue darken-3' onClick={toggleModalType}>{changeTypeBtnText}</button>\n                </div>\n                <div className='modal-footer row center'>\n                    <button className=\"btn waves-effect waves-light light-blue darken-3\" type=\"submit\" name=\"action\" id=\"signUpBtn\" href=\"/homepage\" onClick={authSubmit}>Submit<i className=\"material-icons right\">send</i></button>\n                </div>\n                {/* <div className=\"modal-footer\">\n                    <a className=\"modal-close waves-effect waves-green btn-flat\" onClick={closeModal}>X</a>\n                </div> */}\n            </form>\n        </Modal>\n    )\n}\n\n// colors for buttons: https://materializecss.com/color.html\n\nexport default LoginSignUpModal;","import React, { useState, useEffect } from 'react';\n//import './main.css';\n//-import Run from \"../../pages/Run/Run\";\nimport Pubsub from '../../utilities/pubsub';\nimport LoginSignUpModal from '../LoginSignUpModal/LoginSignUpModal';\n//import Challenge from '../Challenge/Challenge';\n//import Auth from '../../utilities/authorizer';\n//import HomePage from \"../../pages/HomePage/HomePage\";\n//-import Bike from '../../pages/Bike/Bike';\n//-import Abstain from '../../pages/Abstaining/Abstaining';\n//-import Water from '../../pages/Water/Water';\n//-import ChallengePage from '../ChallengePage/ChallengePage';\n//import ChallengeContainer from '../ChallengeContainer/ChallengeContainer';\n//-import FAB from '../FloatingButton/Fab';\n//import { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction Main() {\n\n  const [authenticated, setAuthenticated] = useState(false);\n  //-const [challengeType, setChallengeType] = useState('');\n\n  useEffect(() => {\n    Pubsub.subscribe('login', this, handleSignin);\n    Pubsub.subscribe('logout', this, handleSignout);\n    //-Pubsub.subscribe('challengeType', this, handleChallengeType);\n    return (() => {\n      Pubsub.unsubscribe('login', this);\n      Pubsub.unsubscribe('logout', this);\n      //-Pubsub.unsubscribe('challengeType', this);\n    });\n  }, []);\n\n  const handleSignout = () => {\n    setAuthenticated(false);\n  }\n\n  const handleSignin = () => {\n    setAuthenticated(true);\n  }\n\n  //-const handleChallengeType = (challengeType) => {\n  //-  setChallengeType(challengeType);\n  //-  console.log('challenge type is: ' + challengeType);\n  //-}\n\n  // const pageDirector = () => {\n  //   if (authenticated) {\n  //     switch (challengeType) {\n  //       case ('run'):\n  //         return <Run />;\n  //       case ('bike'):\n  //         return <Bike />;\n  //       case ('water'):\n  //         return <Water />;\n  //       case ('abstain'):\n  //         return <Abstain />;\n  //       default:\n  //         return <ChallengePage />\n  //     }\n  //   }\n  // }\n\n  return (\n\n    <div>\n      {/* <Router>\n        <div>\n          <Route exact path=\"/challengepage\" component={ChallengePage} />\n          <Route exact path=\"/homepage\" component={HomePage}/>\n        </div>\n      </Router> */}\n      <LoginSignUpModal />\n      {/* <FAB /> */}\n      {/* {pageDirector()} */}\n    </div>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\n//import Auth from './authorizer';\n\n// function App() {\n\n//   const authSubmit = (event) => {\n//     event.preventDefault();\n//     Auth();\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//            <button onClick={authSubmit}>Submit</button>\n//       </header>\n//     </div>\n//   );\n// }\n\n//import Navbar from './components/Navbar/Navbar';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Navbar /> */}\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}